#-- DISCLAIMER OF LIABILITY
#--
#-- This file contains proprietary and confidential information of
#-- Xilinx, Inc. ("Xilinx"), that is distributed under a license
#-- from Xilinx, and may be used, copied and/or disclosed only
#-- pursuant to the terms of a valid license agreement with Xilinx.
#--
#-- XILINX IS PROVIDING THIS DESIGN, CODE, OR INFORMATION
#-- ("MATERIALS") "AS IS" WITHOUT WARRANTY OF ANY KIND, EITHER
#-- EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING WITHOUT
#-- LIMITATION, ANY WARRANTY WITH RESPECT TO NONINFRINGEMENT,
#-- MERCHANTABILITY OR FITNESS FOR ANY PARTICULAR PURPOSE. Xilinx
#-- does not warrant that functions included in the Materials will
#-- meet the requirements of Licensee, or that the operation of the
#-- Materials will be uninterrupted or error-free, or that defects
#-- in the Materials will be corrected. Furthermore, Xilinx does
#-- not warrant or make any representations regarding use, or the
#-- results of the use, of the Materials in terms of correctness,
#-- accuracy, reliability or otherwise.
#--
#-- Xilinx products are not designed or intended to be fail-safe,
#-- or for use in any application requiring fail-safe performance,
#-- such as life-support or safety devices or systems, Class III
#-- medical devices, nuclear facilities, applications related to
#-- the deployment of airbags, or any other applications that could
#-- lead to death, personal injury or severe property or
#-- environmental damage (individually and collectively, "critical
#-- applications"). Customer assumes the sole risk and liability
#-- of any use of Xilinx products in critical applications,
#-- subject only to applicable laws and regulations governing
#-- limitations on product liability.
#--
#-- Copyright (c) 1995-2010 Xilinx, Inc.  All rights reserved.
#--
#-- This disclaimer and copyright notice must be retained as part
#-- of this file at all times.
#--
###################################################################
##
## Name     : cdc_vga_axi_slave
## Desc     : Microprocessor Peripheral Description
##          : Automatically generated by PsfUtility
##
###################################################################

BEGIN cdc_vga_axi_slave

## Peripheral Options
OPTION IPTYPE = PERIPHERAL
OPTION IMP_NETLIST = TRUE
OPTION STYLE = MIX
OPTION DESC = cdc_vga_AXI Slave
OPTION LONG_DESC = cdc_AXI Slave (vga port only)
OPTION HDL = MIXED
OPTION RUN_NGCBUILD = FALSE

## Bus Interfaces
BUS_INTERFACE BUS = S_AXI, BUS_STD = AXI, BUS_TYPE = SLAVE

## Generics for VHDL or Parameters for Verilog
PARAMETER C_S_AXI_ID_WIDTH = 1, DT = integer, BUS = S_AXI
PARAMETER C_S_AXI_ADDR_WIDTH = 17, DT = integer, BUS = S_AXI
PARAMETER C_S_AXI_DATA_WIDTH = 32, DT = integer, RANGE = (32, 64, 128, 256), BUS = S_AXI
PARAMETER C_S_AXI_PROTOCOL = AXI4, DT = string, TYPE = NON_HDL, VALUES = (AXI4 = AXI4, AXI4Lite = AXI4Lite, AXI3 = AXI3), BUS = S_AXI
PARAMETER C_S_AXI_SUPPORTS_READ = 1, DT = integer, RANGE = (0,1), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, BUS = S_AXI
PARAMETER C_S_AXI_SUPPORTS_WRITE = 1, DT = integer, RANGE = (0,1), TYPE = NON_HDL, ASSIGNMENT = OPTIONAL_UPDATE, BUS = S_AXI
PARAMETER C_S_AXI_SUPPORTS_USER_SIGNALS = 0, DT = integer, RANGE = (0,1), TYPE = NON_HDL, BUS = S_AXI
PARAMETER C_S_AXI_AWUSER_WIDTH = 1, DT = integer, ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1), BUS = S_AXI
PARAMETER C_S_AXI_ARUSER_WIDTH = 1, DT = integer, ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1), BUS = S_AXI
PARAMETER C_S_AXI_WUSER_WIDTH = 1, DT = integer, ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1), BUS = S_AXI
PARAMETER C_S_AXI_RUSER_WIDTH = 1, DT = integer, ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1), BUS = S_AXI
PARAMETER C_S_AXI_BUSER_WIDTH = 1, DT = integer, ISVALID = (C_S_AXI_SUPPORTS_USER_SIGNALS == 1), BUS = S_AXI
PARAMETER C_S_AXI_NUM_ADDR_RANGES = 1, BUS = S_AXI, DT = INTEGER, ASSIGNMENT = OPTIONAL_UPDATE, TYPE = NON_HDL, RANGE = (1:4)
PARAMETER C_S_AXI_RNG00_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG00_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 1), TYPE = NON_HDL, MIN_SIZE = 0x20000
PARAMETER C_S_AXI_RNG00_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG00_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 1), TYPE = NON_HDL
PARAMETER C_S_AXI_RNG01_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG01_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 2), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S_AXI_RNG01_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG01_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 2), TYPE = NON_HDL
PARAMETER C_S_AXI_RNG02_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG02_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 3), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S_AXI_RNG02_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG02_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 3), TYPE = NON_HDL
PARAMETER C_S_AXI_RNG03_BASEADDR = 0xFFFFFFFF, BUS = S_AXI, DT = std_logic_vector, ADDRESS = BASE, PAIR = C_S_AXI_RNG03_HIGHADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 4), TYPE = NON_HDL, MIN_SIZE = 0x1000
PARAMETER C_S_AXI_RNG03_HIGHADDR = 0x00000000, BUS = S_AXI, DT = std_logic_vector, ADDRESS = HIGH, PAIR = C_S_AXI_RNG03_BASEADDR, ISVALID = (C_S_AXI_NUM_ADDR_RANGES >= 4), TYPE = NON_HDL

PARAMETER RESOLUTION = 1, DT = INTEGER, RANGE = (0:4), VALUES = (0=VGA, 1=SVGA, 2=XGA, 3=SXGA, 4=HD)

## Ports
PORT ACLK = "", BUS = S_AXI, DIR = I, SIGIS = CLK
PORT ARESETN = ARESETN, BUS = S_AXI, DIR = I, SIGIS = RST
PORT S_AXI_AWID = AWID, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_AWADDR = AWADDR, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0]
PORT S_AXI_AWLEN = AWLEN, BUS = S_AXI, DIR = I, VEC = [7:0]
PORT S_AXI_AWSIZE = AWSIZE, BUS = S_AXI, DIR = I, VEC = [2:0]
PORT S_AXI_AWBURST = AWBURST, BUS = S_AXI, DIR = I, VEC = [1:0]
PORT S_AXI_AWLOCK = AWLOCK, BUS = S_AXI, DIR = I, VEC = [1:0]
PORT S_AXI_AWCACHE = AWCACHE, BUS = S_AXI, DIR = I, VEC = [3:0]
PORT S_AXI_AWPROT = AWPROT, BUS = S_AXI, DIR = I, VEC = [2:0]
PORT S_AXI_AWREGION = AWREGION, BUS = S_AXI, DIR = I, VEC = [3:0]
PORT S_AXI_AWQOS = AWQOS, BUS = S_AXI, DIR = I, VEC = [3:0]
PORT S_AXI_AWUSER = AWUSER, BUS = S_AXI, DIR = I, VEC = [C_S_AXI_AWUSER_WIDTH-1:0]
PORT S_AXI_AWVALID = AWVALID, BUS = S_AXI, DIR = I
PORT S_AXI_AWREADY = AWREADY, BUS = S_AXI, DIR = O
PORT S_AXI_WID = WID, BUS = S_AXI, DIR = I, VEC = [C_S_AXI_ID_WIDTH-1:0]
PORT S_AXI_WDATA = WDATA, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT S_AXI_WSTRB = WSTRB, BUS = S_AXI, DIR = I, VEC = [((C_S_AXI_DATA_WIDTH/8) -1):0]
PORT S_AXI_WLAST = WLAST, BUS = S_AXI, DIR = I
PORT S_AXI_WUSER = WUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_WUSER_WIDTH-1):0]
PORT S_AXI_WVALID = WVALID, BUS = S_AXI, DIR = I
PORT S_AXI_WREADY = WREADY, BUS = S_AXI, DIR = O
PORT S_AXI_BID = BID, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0]
PORT S_AXI_BRESP = BRESP, BUS = S_AXI, DIR = O, VEC = [1:0]
PORT S_AXI_BUSER = BUSER, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_BUSER_WIDTH-1):0]
PORT S_AXI_BVALID = BVALID, BUS = S_AXI, DIR = O
PORT S_AXI_BREADY = BREADY, BUS = S_AXI, DIR = I
PORT S_AXI_ARID = ARID, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ID_WIDTH-1):0
PORT S_AXI_ARADDR = ARADDR, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ADDR_WIDTH-1):0
PORT S_AXI_ARLEN = ARLEN, BUS = S_AXI, DIR = I, VEC = [7:0]
PORT S_AXI_ARSIZE = ARSIZE, BUS = S_AXI, DIR = I, VEC = [2:0]
PORT S_AXI_ARBURST = ARBURST, BUS = S_AXI, DIR = I, VEC = [1:0]
PORT S_AXI_ARLOCK = ARLOCK, BUS = S_AXI, DIR = I, VEC = [1:0]
PORT S_AXI_ARCACHE = ARCACHE, BUS = S_AXI, DIR = I, VEC = [3:0]
PORT S_AXI_ARPROT = ARPROT, BUS = S_AXI, DIR = I, VEC = [2:0]
PORT S_AXI_ARREGION = ARREGION, BUS = S_AXI, DIR = I, VEC = [3:0]
PORT S_AXI_ARQOS = ARQOS, BUS = S_AXI, DIR = I, VEC = [3:0]
PORT S_AXI_ARUSER = ARUSER, BUS = S_AXI, DIR = I, VEC = [(C_S_AXI_ARUSER_WIDTH-1):0]
PORT S_AXI_ARVALID = ARVALID, BUS = S_AXI, DIR = I
PORT S_AXI_ARREADY = ARREADY, BUS = S_AXI, DIR = O
PORT S_AXI_RID = RID, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_ID_WIDTH-1):0
PORT S_AXI_RDATA = RDATA, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_DATA_WIDTH-1):0]
PORT S_AXI_RRESP = RRESP, BUS = S_AXI, DIR = O, VEC = [1:0]
PORT S_AXI_RLAST = RLAST, BUS = S_AXI, DIR = O
PORT S_AXI_RUSER = RUSER, BUS = S_AXI, DIR = O, VEC = [(C_S_AXI_RUSER_WIDTH-1):0]
PORT S_AXI_RVALID = RVALID, BUS = S_AXI, DIR = O
PORT S_AXI_RREADY = RREADY, BUS = S_AXI, DIR = I

PORT pixclk = "", DIR = I, SIGIS = CLK
PORT reset_pixclk = "", DIR = I, SIGIS = RST
PORT red_out="", DIR = O, VEC = [4:0]
PORT green_out="", DIR = O, VEC = [5:0]
PORT blue_out="", DIR = O, VEC = [4:0]
PORT hsync_n="", DIR = O
PORT vsync_n="", DIR = O

END
